datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String          @default("user")
  scores        Score[]         // Nouvelle relation
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model GameMode {
  id          Int @id @default(autoincrement())
  type        GameType @unique
  name        String
  description String?
  scores      Score[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Region {
  id          Int @id @default(autoincrement())
  code        RegionCode @unique
  name        String
  latitude    Float
  longitude   Float
  scores      Score[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Score {
  id         String    @id @default(cuid())
  userId     String
  gameModeId Int
  regionId   Int
  time       Int       
  errors     Int       
  score      Int       // ? Pas encore utilis√©
  completed  Boolean   @default(false)
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameMode  GameMode  @relation(fields: [gameModeId], references: [id])
  region    Region    @relation(fields: [regionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([gameModeId])
  @@index([regionId])
}

enum GameType {
  FLAGS
  LOCATION
  CAPITALS
}

enum RegionCode {
  AF // Africa
  AN // Antarctica
  AS // Asia
  EU // Europe
  NA // North America
  OC // Oceania
  SA // South America
}